// Rem output with px fallback
@mixin font-size($sizeValue: 1.6, $lineHeight: false ) {
	font-size: ($sizeValue * 10) + px;
	font-size: $sizeValue + rem;
	@if ($lineHeight) {
		line-height: $lineHeight;
	}
}

@mixin hover-state {
	&:hover,
	&:active,
	&:focus {
		@content;
	}
}

@mixin clearfix() {
	content: '';
	display: table;
	table-layout: fixed;
}

@mixin clearfix-after() {
	clear: both;
}

@mixin light-on-dark() {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin uppercase( $sizeValue: false, $letterSpace: 4 ) {
	@if ($sizeValue) {
		@include font-size( $sizeValue );
	}
	font-weight: bold;
	text-transform: uppercase;
	letter-spacing: $letterSpace * 1px;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin sr-clip() {
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute !important;
	height: 1px;
	width: 1px;
	overflow: hidden;
}

// This is a mixin so it can be shared between GB & theme.
@mixin button {
	display: inline-block;
	margin: 0;
	padding: $gap-smaller/2 $gap-small;
	@include font-size( 1.6, 1 );
	font-family: $font-header;
	color: $color-text;
	background: transparent;
	border: 2px solid currentColor;
	border-radius: 0;
	text-shadow: none;
	box-shadow: none;

	@include hover-state {
		outline: none;
	}
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}
